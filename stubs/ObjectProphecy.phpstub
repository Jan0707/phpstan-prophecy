<?php

/*
 * This file is part of the Prophecy.
 * (c) Konstantin Kudryashov <ever.zet@gmail.com>
 *     Marcello Duarte <marcello.duarte@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Prophecy\Prophecy;

use Prophecy\Comparator\FactoryProvider;
use SebastianBergmann\Comparator\ComparisonFailure;
use SebastianBergmann\Comparator\Factory as ComparatorFactory;
use Prophecy\Call\Call;
use Prophecy\Doubler\LazyDouble;
use Prophecy\Argument\ArgumentsWildcard;
use Prophecy\Call\CallCenter;
use Prophecy\Exception\Prophecy\ObjectProphecyException;
use Prophecy\Exception\Prophecy\MethodProphecyException;
use Prophecy\Exception\Prediction\AggregateException;
use Prophecy\Exception\Prediction\PredictionException;

/**
 * This stubs should be able to be removed when the following bug fixed:
 *    - https://github.com/Jan0707/phpstan-prophecy/pull/366#issuecomment-2650390076
 *    - https://github.com/phpstan/phpstan/issues/12575
 *
 * @template-covariant T of object
 * @template-implements ProphecyInterface<T>
 */
class ObjectProphecy implements ProphecyInterface
{
    /**
     * @return T
     */
    public function reveal()
    {
    }

    /**
     * @param string $class
     *
     * @return ObjectProphecy<T&U>
     *
     * @template U of object
     * @phpstan-param class-string<U> $class
     * @phpstan-this-out ObjectProphecy<T&U>
     */
    public function willExtend($class)
    {
    }

    /**
     * Forces double to implement specific interface.
     *
     * @param string $interface
     *
     * @return ObjectProphecy<T&U>
     *
     * @template U of object
     * @phpstan-param class-string<U> $interface
     * @phpstan-this-out ObjectProphecy<T&U>
     */
    public function willImplement($interface)
    {
    }
}
